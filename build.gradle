import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id("io.github.juuxel.loom-vineflower") version "1.11.0"
    id 'org.ajoberstar.grgit' version '4.1.0'
    id "fr.stardustenterprises.rust.importer" version "2.1.0"
    id "fr.stardustenterprises.rust.wrapper" version "2.1.0" apply false
}

apply from: "${rootProject.projectDir}/gradle/fabric.gradle"
apply from: "${rootProject.projectDir}/gradle/java.gradle"

archivesBaseName = "${project.archives_base_name}-mc${project.minecraft_version}"
version = "${project.mod_version}+${getVersionMetadata()}"
group = project.maven_group

loom {
    mixin.defaultRefmapName = "mixins.sodium.refmap.json"
    accessWidenerPath = file("src/main/resources/sodium.accesswidener")
}

configurations {
    modIncludeImplementation

    include.extendsFrom modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation
}

sourceSets {
    api {
        java {
            compileClasspath += main.compileClasspath
        }
    }

    main {
        java {
            compileClasspath += api.output
            runtimeClasspath += api.output
        }
    }
}

tasks.register('apiJar', Jar) {
    archiveClassifier.set "api-dev"

    from sourceSets.api.output
}

tasks.register('remapApiJar', RemapJarTask) {
    dependsOn apiJar
    archiveClassifier.set "api"

    input = apiJar.archiveFile.get().asFile
    addNestedDependencies = false
}

build.dependsOn apiJar
build.dependsOn remapApiJar

jar {
    from sourceSets.api.output.classesDirs
    from sourceSets.api.output.resourcesDir
}

tasks {
    processResources {
        finalizedBy("unpackExports")
    }

    jar {
        dependsOn("unpackExports")
    }

    runClient {
        dependsOn("unpackExports")
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modIncludeImplementation(fabricApi.module("fabric-api-base", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-fluids-v1", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-rendering-data-attachment-v1", project.fabric_version))
    modIncludeImplementation(fabricApi.module("fabric-resource-loader-v0", project.fabric_version))

    rustImport(project(":core"))
}

def getVersionMetadata() {
    return "-rust"
}

tasks.register("unpackExports", Copy) {
    from zipTree("build/resources/main/export.zip")
    into layout.buildDirectory.dir("resources/main")
}
